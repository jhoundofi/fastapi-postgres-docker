name: Docker Image CI and Deploy

# Lancer le workflow sur un push ou une pull request vers la branche 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # Exécuter sur une machine virtuelle Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Checkout du code source depuis le repo GitHub
      - name: Checkout the code
        uses: actions/checkout@v4

      # Étape 2 : Se connecter au registre de conteneurs Scaleway
      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCALEWAY_API_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}

      # Étape 3 : Construire l'image Docker pour l'application FastAPI
      - name: Build the Docker image
        run: docker-compose build app

      # Étape 4 : Taguer l'image construite avec la dernière version
      - name: Tag the image with 'latest'
        run: docker tag ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/jcredodockercompose:${{ github.sha }} ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/jcredodockercompose:latest

      # Étape 5 : Pousser l'image Docker vers le registre Scaleway
      - name: Push the Docker Image
        run: |
          docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/jcredodockercompose:${{ github.sha }}
          docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/jcredodockercompose:latest

  deploy:
    # Cette étape dépend de la construction réussie de l'image
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Étape 1 : Checkout du code source
      - name: Checkout the code
        uses: actions/checkout@v4

      # Étape 2 : Déploiement de l'application avec docker-compose
      - name: Deploy with Docker Compose
        run: docker-compose up -d
